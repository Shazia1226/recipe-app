{"version":3,"sources":["Recipe.js","App.js","reportWebVitals.js","index.js","recipe.module.css"],"names":["Recipe","title","calories","image","ingredients","className","style","recipe","map","ingredient","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","onSubmit","e","preventDefault","type","value","onChange","target","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"iQAgBeA,EAZD,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,MAAMC,EAA8B,EAA9BA,SAASC,EAAqB,EAArBA,MAAMC,EAAe,EAAfA,YACjC,OACI,sBAAKC,UAAWC,IAAMC,OAAtB,UACI,6BAAKN,IACb,6BAAKG,EAAYI,KAAI,SAAAC,GAAU,OAC3B,6BAAKA,EAAWC,YAEZ,4BAAIR,IACJ,qBAAKG,UAAWC,IAAMH,MAAMQ,IAAKR,EAAOS,IAAK,SCwC1CC,G,MAhDH,WAEZ,IAFkB,EAIYC,mBAAS,IAJrB,mBAIXC,EAJW,KAIFC,EAJE,OAKUF,mBAAS,IALnB,mBAKXG,EALW,KAKHC,EALG,OAMOJ,mBAAS,WANhB,mBAMXK,EANW,KAMJC,EANI,KAQlBC,qBAAU,WACRC,MACA,CAACH,IAEF,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCL,EAApC,mBAXhB,WAWgB,oBAVf,qCASI,cACXM,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBX,EAAWW,EAAKC,MAHC,2CAAH,qDAcf,OACE,sBAAKvB,UAAU,MAAf,UACE,uBAAMwB,SARO,SAAAC,GACfA,EAAEC,iBACFX,EAASH,GACTC,EAAU,KAKmBb,UAAU,cAArC,UACE,uBAAOA,UAAU,aAAa2B,KAAK,OAAOC,MAAOhB,EAAQiB,SAZ3C,SAAAJ,GACnBZ,EAAUY,EAAEK,OAAOF,UAYd,wBAAQ5B,UAAU,gBAAgB2B,KAAK,SAAvC,uBAGF,qBAAK3B,UAAU,UAAf,SACCU,EAAQP,KAAI,SAAAD,GAAM,OACjB,cAAC,EAAD,CAEAN,MAAOM,EAAOA,OAAO6B,MACrBlC,SAAUK,EAAOA,OAAOL,SACxBC,MAAOI,EAAOA,OAAOJ,MACrBC,YAAaG,EAAOA,OAAOH,aAJtBG,EAAOA,OAAO6B,iBC5BZC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,yB","file":"static/js/main.1b4ce3a5.chunk.js","sourcesContent":["import React from 'react';\r\nimport style from './recipe.module.css';\r\n\r\n\r\nconst Recipe =({title,calories,image,ingredients})=>{\r\n    return(\r\n        <div className={style.recipe}>\r\n            <h1>{title}</h1>\r\n    <ol>{ingredients.map(ingredient =>(\r\n        <li>{ingredient.text}</li>\r\n    ))}</ol>\r\n            <p>{calories}</p>\r\n            <img className={style.image}src={image} alt =\"\"/>\r\n        </div>\r\n    )\r\n}\r\nexport default Recipe;","import React,{useEffect, useState}from 'react';\nimport Recipe from './Recipe';\nimport './App.css';\n\nconst App = () => {\n\nconst APP_ID = '726538de';\nconst APP_KEY = '5a35b2d0fa2328b153703c1aae0bb05a';\nconst [recipes, setRecipes] = useState([])\nconst [search, setSearch] = useState(\"\");\nconst [query, setQuery]= useState('chicken');\n\nuseEffect(() => {\n  getRecipes();\n},[query]);\n\n const getRecipes = async () => {\n   const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n   const data = await response.json();\n   setRecipes(data.hits);\n }\n const updateSearch = e => {\n   setSearch(e.target.value);\n }\n  const getSearch= e=>{\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n\n  }\n  return (\n    <div className=\"App\">\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch}/>\n        <button className=\"search-button\" type=\"submit\">SEARCH</button>\n\n      </form>\n      <div className=\"recipes\">\n      {recipes.map(recipe =>(\n        <Recipe \n        key={recipe.recipe.label}\n        title={recipe.recipe.label} \n        calories={recipe.recipe.calories} \n        image={recipe.recipe.image}\n        ingredients={recipe.recipe.ingredients}/>\n        \n      ))}\n    </div>\n    </div>\n  );\n  }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__3aGyc\",\"image\":\"recipe_image__3PYDo\"};"],"sourceRoot":""}